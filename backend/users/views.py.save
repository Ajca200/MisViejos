from rest_framework import generics, status
from django.views.decorators.csrf import csrf_exempt
from rest_framework.views import APIView
from django.http import JsonResponse, HttpResponse
from django.shortcuts import render, redirect
from django.db import connection, DatabaseError
from django.urls import reverse
import jwt
from datetime import datetime, timezone
from django.conf import settings
from functools import wraps

def make_access_token(user_dict: dict):
    now = datetime.now(timezone.utc)

    payload = {
        "sub": user_dict["user_id"],   # id del usuario
        "role": user_dict.get("role", "user"),
        "email": user_dict["email"],
        "type": "access",
        "iat": int(now.timestamp()),
        "exp": int((now + settings.JWT_ACCESS_TTL).timestamp()),
    }

    return jwt.encode(payload, settings.JWT_SECRET, algorithm=settings.JWT_ALG)

def decode_token(token: str) -> dict:
    return jwt.decode(token, settings.JWT_SECRET, algorithms=[settings.JWT_ALG])

def jwt_required(view_func):
    @wraps(view_func)
    def _wrapped(request, *args, **kwargs):
        print(request.COOKIES)
        token = request.COOKIES.get("access_token")
        if not token:
            return JsonResponse({"detail": "No autenticado"}, status=401)
        try:
            payload = decode_token(token)
        except jwt.ExpiredSignatureError:
            return JsonResponse({"detail": "Token expirado"}, status=401)
        except jwt.InvalidTokenError:
            return JsonResponse({"detail": "Token inválido"}, status=401)
        request.jwt = payload
        return view_func(request, *args, **kwargs)
    return _wrapped

def oginPage(request):
    token = request.COOKIES.get("access_token")

    payload = decode_token(token)

    user_id = payload["sub"]

    try:
        with connection.cursor() as cursor:
            cursor.execute("SELECT * FROM usuarios_dat.obtener_nombre(%s)", user_id)
            result = cursor.fetchone()

            if result:
                usu_nom = result[0]

                render(request, 'login.hmtl', context={'usu_nom': usu_nom})

    except DatabaseError as e:
            return HttpResponse(f"<h1>Error en la BD: {str(e)}</h1>", status=400>

    return render(request, 'login.html')

def RegisterPage(request):
    return render(request, 'register.html')

@jwt_required
def ConfigurationPage(request):
    return render(request, 'configuracion.html')

@jwt_required
def ProductsPage(request):
    return render(request, 'productos_dashboard.html')

@jwt_required
def PedidosPage(request):
    return render(request, 'pedidos.html')

@jwt_required
def UsuariosPage(request):
    return render(request, 'usuarios_admin.html')

@jwt_required
def DomiciliosPage(request):
    return render(request, 'domicilios.html')
    
def ResumenPage(request):
    token = request.COOKIES.get("access_token")
    if not token:
        return HttpResponse("<h1>No autenticado</h1>", status=401)

    try:
        payload = decode_token(token)
        user_id = payload["sub"]
        user_rol = payload["role"]

        if user_rol == 'admin':
            return render(request, 'dashboard_admin.html', {
                'user_id': user_id,
                'user_rol': user_rol
            })
        else:
            return render(request, 'dashboard_client.html', {
                'user_id': user_id,
                'user_rol': user_rol
            })
    except jwt.ExpiredSignatureError:
        return HttpResponse("<h1>Token expirado</h1>", status=401)
    except jwt.InvalidTokenError:
        return HttpResponse("<h1>Token inválido</h1>", status=401)

@csrf_exempt
def LoginView(request):
    if request.method == 'POST':
        email = request.POST.get('email')
        password = request.POST.get('password')

        try:
            with connection.cursor() as cursor:
                cursor.execute('SELECT * FROM usuarios_dat.inicio_sesion(%s, %s)', [email, password])
                result = cursor.fetchone()

                if result:
                    user_id = result[0]   # ID del usuario
                    user_rol = result[1]  # Rol del usuario

                    payload = {
                        "user_id": user_id,
                        "role": user_rol,
                        "email": email
                    }
                    # Generar JWT
                    token = make_access_token(payload)

                    resp = redirect('/users/resumen')
                    resp.set_cookie(
                        "access_token",
                        token,
                        httponly=True,
                        secure=True,     # exige HTTPS en prod
                        samesite="Lax",  # si frontend/backend en mismo dominio
                        path="/",
                        max_age=60*15    # 15 min
                    )
                    return resp

                return HttpResponse("<h1>Error: Credenciales inválidas</h1>", status=401)

        except DatabaseError as e:
            return HttpResponse(f"<h1>Error en la BD: {str(e)}</h1>", status=400)

    return HttpResponse("<h1>Método no permitido</h1>", status=405)

@csrf_exempt
def RegisterView(request):
    if request.method == 'POST':
        name = request.POST.get('nombre')
        lastname = request.POST.get('apellido')
        fn = request.POST.get('fecha_nacimiento') # fecha de nacimiento
        email = request.POST.get('email')
        password = request.POST.get('password')

        try:
            with connection.cursor() as cursor:
                cursor.execute('SELECT * FROM usuarios_dat.registrar_usuario(%s, %s, %s, %s, %s)', [name, lastname, fn, email, password])

                result = cursor.fetchone()

                if result:
                    user_id = result[0]   # ID del usuario
                    user_rol = result[1]  # Rol del usuario

                    payload = {
                        "user_id": user_id,
                        "role": user_rol,
                        "email": email
                    }
                    # Generar JWT
                    token = make_access_token(payload)

                    resp = redirect('/users/resumen')
                    resp.set_cookie(
                        "access_token",
                        token,
                        httponly=True,
                        secure=True,     # exige HTTPS en prod
                        samesite="Lax",  # si frontend/backend en mismo dominio
                        path="/",
                        max_age=60*15    # 15 min
                    )
                    return resp

                return HttpResponse("<h1>Error: Credenciales inválidas</h1>", status=401)
        except DatabaseError as e:
            return HttpResponse(f"<h1>Error en la BD: {str(e)}</h1>", status=400)

@csrf_exempt
def ActualizarDatosView(request):
    token = request.COOKIES.get("access_token")

    if not token:
        return HttpResponse("<h1>No autenticado</h1>", status=401)
    
    payload = decode_token(token)
    user_id = payload["sub"]

    if request.method == 'POST':
        nombre = request.POST.get('name')
        apellido = request.POST.get('lastname')
        fecha_nacimiento = request.POST.get('fn')

        try:
            with connection.cursor() as cursor:
                cursor.execute('CALL usuarios_dat.actualizar_usuario(%s, %s, %s, %s)', [user_id, nombre, apellido, fecha_nacimiento])

                return JsonResponse({"Exito": "Los Datos han sido actualizados exitosamente"}, status=200)
        except DatabaseError as e:
            return HttpResponse(f"<h1>Error en la BD: {str(e)}</h1>", status=400)
        except Exception as e:
            return HttpResponse(f"<h1>Error en la BD: {str(e)}</h1>", status=500)

    return HttpResponse("<h1>Método no permitido</h1>", status=405)
